---
description: 自定义 Cursor 规则配置
globs: ["**/*"]
alwaysApply: true
---

# Cursor 规则配置

## Troubleshooting 编译问题
- 在 Troubleshooting ,不要进行非实质性修改 ( 排版，注释 , 添加不必要的头文件 , ... ) 以避免污染注意力
- 如果找不到头文件， 先确认这个头文件是不是在期望的目录下面，再检查这个头文件的路径是否在头文件搜索路径上
- 如果找不到类定义，先确定这个类在哪个头文件中，再确定这个头文件是否在头文件搜索路径上
- 保证代码修改量最少，别修改一堆装饰性的代码，除非你指出这是个bug并获得认可这是一个bug

## 文件引用
- 和用户交互解释代码时，使用中文
- 我很熟悉C++ ，不怎么熟悉python ，在解释python语法时，如果能够使用C++类似概念来类比说明，我会理解得更好
- 使用 @ 符号引用文件，例如 @README.md
- 支持相对路径和绝对路径
- 当搜索文件时，排除掉 .git , .svn , .github 等等这些类似的隐藏目录

## 代码风格
- 遵循"最小修改原则"：如果你不确定代码风格是否合适(空格、换行、对齐) ，就保持原样，不要改它。
- 在修改代码时，如果你没有绝对的把握，不要直接修改既有的代码，而是采用复制的方式。比如修改xxx函数，那么你复制xxx函数为xxx_debug函数，xxx函数保持不变，新 xxx_debug 函数可以自由修改，这样的目的是我只在一个调用处来测试你的修改而不是影响大面积代码。测试成功会，我删除xxx，然后 xxx => xxx_debug
- 在修改代码时，如果你没有绝对的把握，不要直接修改既有的代码，而是采用注释的方式。比如修改非函数代码行，那么你把原有的行给注释掉，而不是直接替换掉原有行。这样我对比测试通过后，我会手工删除注释掉的代码。
- 名字字符串中不要出现中划线，用下划线代替
- 保持代码格式一致
- 用空格来代替tab(除非语法要求必须tag键)，行尾不许出现空格
- 在格式相似的代码中，尽量保持列对齐增加代码可读性
- 遵循项目现有的代码风格，不要添加画蛇添足的更新
- 尽量不要使用硬编码而使用变量，如果有地方使用硬编码，则用一个变量来代表它
- 如果没有用户明确要求，尽量不要添加不必须的代码
- 用户手工注释掉的行不要删除以作为参考对照
- 不要画蛇添足试图改变已有代码的风格，比增加/删除空行。 你只允许在自己改的代码中间添加/删除空行

## 注释风格
- 代码注释一律使用英文, 如果注释不是很长一行能够容纳，尽量在行尾以保持代码紧凑简洁
- 不要修改已经存在的注释，除非变量替换之类，比如 变量 A 统一地重命名为 B 并且已经存在的注释中引用了A
- 易懂的代码不要添加注释，只为复杂难懂的代码添加注释，尽量用代码自身来解释自身. 工作流式的代码注释除外，但应该添加序号 1, 2, 3, ... 来表示流程序列
- python 代码不需要为函数写注释，尽量用易懂的函数命名来代替注释
- 除非统一替换，否则不要修改已经存在的注释或者添加新的注释

## 文档规范
- 保持文档结构清晰
- 及时更新文档内容
- 用户手工删除的部分不要恢复添加，除非明确地指示要求
- 简洁明了通俗，尽量不说冗余的话，简洁的解释搭配简洁的代码来说明问题。
- 文档中的代码例子尽量使用单行的简洁模式，不宜多行分散(除非语法要求)。 对于代码的注释尽量在行尾，除非注释非常长。
- .txt 不要使用.md的语法，.md文档才需要。用户在.txt文档中使用的任何字符都不是.md标记符。.md标记符只存在于.md文档
- .txt 文档中的代码注释使用#，不使用//，因为#符能使注释显示灰化，而//没有任何效果。
- 第一级大纲尽量不要使用序号（因为调整章节顺序后所有的序号都得重排），可以使用** 来标识一级大纲(** Level_1 xxx)，一级大纲内的文档可以使用序号
- double-click => double_click, 若非必须使用中划线-，在需要使用中划线-的地方一律使用下划线_来代替连接单词。原因：鼠标双击时，下划线能选中多个关联单词，而中划线只能选中单个单词。
- (english_word) => ( english_word ) ， 以方便用户在阅读时通过鼠标双击来选中单个英文单词，高亮所有的引用处。


## 版本控制
- 遵循语义化版本控制
- 保持提交信息清晰明确
- 定期同步远程仓库

## 项目结构
- 保持目录结构清晰
- 遵循模块化设计原则
- 避免循环依赖
