bash_script_i
# below procedure is verified on xiaolongs@ipp2-0345
# this script needs to be run in bash shell because the gdb built-in script is bash shell

# step 1 : download source code
# https://ftp.gnu.org/gnu/gdb/
# or download directly:
# curl https://ftp.gnu.org/gnu/gdb/gdb-12.1.tar.gz -o  gdb-12.1.tar.gz
# tar -zxvf gdb-12.1.tar.gz -C ./gdb-12.1

# how to install without sudo
# http://www.gdbtutorial.com/tutorial/how-install-gdb
# https://stackoverflow.com/questions/34289327/how-to-install-gdb-in-unix-without-root-access

# step 2 : build ....
gdb_build_root_folder="${DEPENDENCY_DIR}/tools/gdb_build"
# gdb_src_folder="${gdb_build_root_folder}/src/gdb-13.2"
gdb_src_folder="${gdb_build_root_folder}/src/gdb-12.1"

# gdb_13_2
folderName="static_`echo ${gdb_src_folder} | sed 's#.*/##g'| sed 's#-#_#g' | sed 's#\.#_#g'`"
gdb_output_dir="${gdb_build_root_folder}/${folderName}"
gdb_cache_dir="${gdb_output_dir}/build"
gdb_install_dir="${gdb_output_dir}/install"
gdb_log_dir="${gdb_output_dir}/logs"

# --------------------------------------------------------------------------------------------
# export  PYTHON3_PATH="/home/utils/Python-3.9.1"
# export  PYTHONPATH="${PYTHON3_PATH}"

[[ -d "${gdb_output_dir}" ]]    && rm   -rf     ${gdb_output_dir}
mkdir   -p  ${gdb_install_dir}
mkdir   -p  ${gdb_log_dir}
mkdir   -p  ${gdb_cache_dir}

cd ${gdb_cache_dir}
${gdb_src_folder}/configure  --help   >| "${gdb_build_root_folder}/configure_help_${folderName}.txt"

echo
echo "${green}building ${gdb_src_folder} .....${end}"
# to get rid of lib dependency, use static to build the gdb module
# the verification fails
# https://sourceware.org/gdb/onlinedocs/gdb/Configure-Options.html
# ./configure --help

# configure: error: GMP is missing or unusable
# configure CFLAGS="-I/gmp/include/path -L/gmp/lib/path" CXXFLAGS="-I/gmp/include/path -L/gmp/lib/path"

# https://mudongliang.github.io/2017/08/12/compile-gdb-with-python-script-support.html
# https://stackoverflow.com/questions/9364685/how-i-can-static-build-gdb-from-source
cmd_file=${gdb_build_root_folder}/build_${folderName}.sh
{
    echo " "
    echo "# generated by : ${BASH_SOURCE[0]}:$LINENO "
    echo "# configure ... "
    # echo "./configure --prefix=${gdb_install_dir} --with-python"
    # echo "./configure --prefix=${DEPENDENCY_DIR}/tools/gdb_build/static_gdb_12_1 --with-python"
    # echo "./configure --prefix=${gdb_install_dir} --enable-static=yes --with-python --with-static-standard-libraries"
    echo "${gdb_src_folder}/configure --srcdir=${gdb_src_folder} --prefix=${gdb_install_dir} --with-python=${PYTHON3_PATH}/bin/python3  --with-static-standard-libraries " 
    
    echo " "
    echo "# make ... "
    echo  "make LDFLAGS=-static "
    echo  "make install "
} >| "${cmd_file}"
dumpkey cmd_file
cat "${cmd_file}"

echo
source "${cmd_file}"        2>&1   |  tee     "${gdb_log_dir}/build_${folderName}.log"
echo "${red}build done.${brown} check above output log carefully to find any change.${end}"
echo

# step 3 : configure : 
if [[ -r "${gdb_install_dir}/bin/gdb" ]] ; then
    echo "${green} build is sucessfully ,configure ${gdb_install_dir} .....${end}"
    # put below into ${HOME}/.cshrc    or   ${HOME}/linuxScript/login_init.sh
    # export PATH=${gdb_install_dir}/bin;${PATH}
    alias   gdb=${gdb_install_dir}/bin/gdb
    # By default this will install gdb binaries in /usr/local/bin and libs in /usr/local/lib
    export  LIBDIR="${gdb_install_dir}/lib"
    export  LD_LIBRARY_PATH="${gdb_install_dir}/lib:${LD_LIBRARY_PATH}"

    log_file_env=${gdb_log_dir}/gdb_env_${folderName}.log
    echo "# $HOST `date "+%Y%m%d_%H%M"` "                   2>&1   |  tee       "${log_file_env}"    
    echo "PATH=${PATH} "                                    >>          "${log_file_env}"
    echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH} "              >>          "${log_file_env}"
    echo "LIBRARY_PATH=${LIBRARY_PATH} "                    >>          "${log_file_env}"
fi


bash_script_o
